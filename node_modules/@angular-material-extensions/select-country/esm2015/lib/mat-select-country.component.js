import { ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { BehaviorSubject, combineLatest, fromEvent, Subject } from 'rxjs';
import { debounceTime, startWith, takeUntil } from 'rxjs/operators';
import { MatSelectCountryLangToken } from './tokens';
import { MatInput } from '@angular/material/input';
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export class MatSelectCountryComponent {
    constructor(i18n, cdRef) {
        this.i18n = i18n;
        this.cdRef = cdRef;
        this.countries = [];
        this.placeHolder = 'Select country';
        this.showCallingCode = false;
        this.excludedCountries = [];
        // tslint:disable-next-line: no-output-on-prefix
        this.onCountrySelected = new EventEmitter();
        this.debounceTime = 300;
        this.filterString = '';
        this.modelChanged = new Subject();
        this.countries$ = new BehaviorSubject([]);
        this.excludedCountries$ = new BehaviorSubject([]);
        this.value$ = new BehaviorSubject(null);
        this.unsubscribe$ = new Subject();
        this.propagateChange = (_) => { };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        // setting a value on a reactive form (formControlName) doesn't trigger ngOnChanges but it does call this setter
        this.value$.next(value);
    }
    ngOnInit() {
        combineLatest([
            this.countries$,
            this.value$,
            this.excludedCountries$
        ])
            .pipe(
        // fixing the glitch on combineLatest https://blog.strongbrew.io/combine-latest-glitch/
        debounceTime(0), takeUntil(this.unsubscribe$))
            .subscribe(([countries, value, excludedCountries]) => {
            this._populateCountries(countries, excludedCountries);
            if (value) {
                this._setValue(value);
            }
        });
        if (!this.countries.length) {
            this._loadCountriesFromDb();
        }
        this.modelChanged
            .pipe(startWith(''), debounceTime(this.debounceTime), takeUntil(this.unsubscribe$))
            .subscribe((value) => {
            this.filterString = value;
            this._filter(value);
        });
    }
    ngOnChanges(changes) {
        var _a, _b;
        if ((_a = changes.countries) === null || _a === void 0 ? void 0 : _a.currentValue) {
            this.countries$.next(changes.countries.currentValue);
        }
        if ((_b = changes.excludedCountries) === null || _b === void 0 ? void 0 : _b.currentValue) {
            this.excludedCountries$.next(changes.excludedCountries.currentValue);
        }
    }
    onBlur() {
        if (!this.inputElement.value && this.nullable && this.statesAutocompleteRef.panel) {
            this._setValue(null);
            this.onCountrySelected.emit(null);
        }
    }
    onOptionsSelected($event) {
        const value = this.countries.find((country) => country.name === $event.option.value);
        this._setValue(value);
        this.onCountrySelected.emit(value);
    }
    writeValue(obj) {
        if (obj) {
            this.value = obj;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        // throw new Error('Method not implemented.');
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    autocompleteScroll() {
        if (this.itemsLoadSize) {
            setTimeout(() => {
                if (this.statesAutocompleteRef &&
                    this.autocompleteTrigger &&
                    this.statesAutocompleteRef.panel) {
                    fromEvent(this.statesAutocompleteRef.panel.nativeElement, 'scroll')
                        .pipe(takeUntil(this.autocompleteTrigger.panelClosingActions))
                        .subscribe(() => {
                        const scrollTop = this.statesAutocompleteRef.panel.nativeElement
                            .scrollTop;
                        const scrollHeight = this.statesAutocompleteRef.panel
                            .nativeElement.scrollHeight;
                        const elementHeight = this.statesAutocompleteRef.panel
                            .nativeElement.clientHeight;
                        const atBottom = scrollHeight === scrollTop + elementHeight;
                        if (atBottom) {
                            // fetch more data if not filtered
                            if (this.filterString === '') {
                                const fromIndex = this.filteredOptions.length;
                                const toIndex = +this.filteredOptions.length + +this.itemsLoadSize;
                                this.filteredOptions = [
                                    ...this.filteredOptions,
                                    ...this.countries.slice(fromIndex, toIndex),
                                ];
                            }
                        }
                    });
                }
            });
        }
    }
    inputChanged(value) {
        this.modelChanged.next(value);
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    _loadCountriesFromDb() {
        this.loadingDB = true;
        this._importLang(this.i18n)
            .then((res) => {
            this.countries$.next(res);
        })
            .catch((err) => console.error('Error: ' + err))
            .finally(() => this.loadingDB = false);
    }
    _populateCountries(countries, excludedCountries) {
        const excludeCountries = excludedCountries.map(c => c.alpha2Code);
        this.countries = countries.filter(c => !excludeCountries.includes(c.alpha2Code));
    }
    _setValue(value) {
        if (value && (!value.name || value.name === 'Unknown')) {
            // lookup name based on alpha2 values could be extended to lookup on other values too
            const matchingCountry = this.countries.find((c) => c.alpha2Code === value.alpha2Code);
            if (!!matchingCountry) {
                value = matchingCountry;
            }
        }
        this._value = (value === null || value === void 0 ? void 0 : value.name) ? value : null;
        this.propagateChange(this._value);
    }
    _importLang(i18n) {
        switch (i18n) {
            case 'br':
                return import('./i18n/br').then(result => result.COUNTRIES_DB_BR).then(y => y);
            case 'by':
                return import('./i18n/by').then(result => result.COUNTRIES_DB_BY).then(y => y);
            case 'de':
                return import('./i18n/de').then(result => result.COUNTRIES_DB_DE).then(y => y);
            case 'es':
                return import('./i18n/es').then(result => result.COUNTRIES_DB_ES).then(y => y);
            case 'fr':
                return import('./i18n/fr').then(result => result.COUNTRIES_DB_FR).then(y => y);
            case 'hr':
                return import('./i18n/hr').then(result => result.COUNTRIES_DB_HR).then(y => y);
            case 'it':
                return import('./i18n/it').then(result => result.COUNTRIES_DB_IT).then(y => y);
            case 'nl':
                return import('./i18n/nl').then(result => result.COUNTRIES_DB_NL).then(y => y);
            case 'pt':
                return import('./i18n/pt').then(result => result.COUNTRIES_DB_PT).then(y => y);
            case 'ru':
                return import('./i18n/ru').then(result => result.COUNTRIES_DB_RU).then(y => y);
            case 'ua':
                return import('./i18n/ua').then(result => result.COUNTRIES_DB_UA).then(y => y);
            case 'gl':
                return import('./i18n/gl').then(result => result.COUNTRIES_DB_GL).then(y => y);
            case 'eu':
                return import('./i18n/eu').then(result => result.COUNTRIES_DB_EU).then(y => y);
            case 'ca':
                return import('./i18n/ca').then(result => result.COUNTRIES_DB_CA).then(y => y);
            default:
                return import('./i18n/en').then(result => result.COUNTRIES_DB).then(y => y);
        }
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        // if not filtered, fetch reduced array
        if (this.itemsLoadSize && filterValue === '') {
            this.filteredOptions = this.countries.slice(0, this.itemsLoadSize);
        }
        else {
            this.filteredOptions = this.countries.filter((option) => option.name.toLowerCase().includes(filterValue) ||
                option.alpha2Code.toLowerCase().includes(filterValue) ||
                option.alpha3Code.toLowerCase().includes(filterValue));
        }
        // options in the UI are not updated when this component is used within a host component that uses OnPush
        this.cdRef.markForCheck();
    }
}
MatSelectCountryComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-select-country',
                template: "<mat-form-field [appearance]=\"appearance\">\n    <mat-label *ngIf=\"label\">{{label}}</mat-label>\n    <mat-icon *ngIf=\"this.value\" [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\" class=\"mr-12 s-20 secondary-text\"\n              matSuffix></mat-icon>\n    <input (blur)=\"onBlur()\" (input)=\"inputChanged($event?.target?.value)\"\n           [class]=\"class\"\n           [matAutocomplete]=\"this.countryAutocomplete\"\n           [placeholder]=\"this.placeHolder\"\n           [readonly]=\"this.readonly\"\n           [tabIndex]=\"tabIndex\"\n           [value]=\"showCallingCode ? this.value?.callingCode : this.value?.name\"\n           [required]=\"this.required\"\n           [disabled]=\"this.disabled || this.loadingDB\"\n           [autocomplete]=\"browserAutocomplete\"\n           aria-label=\"country\"\n           matInput type=\"text\"\n           #inputElement>\n    <mat-progress-bar *ngIf=\"this.loadingDB || this.loading\" mode=\"buffer\"></mat-progress-bar>\n    <mat-autocomplete #countryAutocomplete=\"matAutocomplete\" (opened)=\"autocompleteScroll()\"\n                      (optionSelected)=\"onOptionsSelected($event)\">\n        <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country?.name\">\n            <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n            <small *ngIf=\"!showCallingCode\">{{ [country?.name, country?.alpha3Code] | joinStrings }}</small>\n            <small *ngIf=\"showCallingCode\">{{ [country?.name, '(' + country?.callingCode + ')'] | joinStrings:' ' }}</small>\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSelectCountryComponent),
                        multi: true,
                    },
                ],
                styles: [""]
            },] }
];
MatSelectCountryComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [forwardRef(() => MatSelectCountryLangToken),] }] },
    { type: ChangeDetectorRef }
];
MatSelectCountryComponent.propDecorators = {
    appearance: [{ type: Input }],
    countries: [{ type: Input }],
    label: [{ type: Input }],
    placeHolder: [{ type: Input }],
    required: [{ type: Input }],
    disabled: [{ type: Input }],
    nullable: [{ type: Input }],
    readonly: [{ type: Input }],
    tabIndex: [{ type: Input }],
    class: [{ type: Input }],
    itemsLoadSize: [{ type: Input }],
    loading: [{ type: Input }],
    showCallingCode: [{ type: Input }],
    excludedCountries: [{ type: Input }],
    browserAutocomplete: [{ type: Input }],
    statesAutocompleteRef: [{ type: ViewChild, args: ['countryAutocomplete',] }],
    autocompleteTrigger: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }],
    inputElement: [{ type: ViewChild, args: [MatInput,] }],
    onCountrySelected: [{ type: Output }],
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,
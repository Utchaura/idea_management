import { NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule, MatIconRegistry } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { COUNTRIES_DB } from './i18n';
import { MatSelectCountryLangToken } from './tokens';
import { JoinStringsPipe } from './join.pipe';
import { MatSelectCountryComponent } from './mat-select-country.component';
/**
 * @author Anthony Nahas
 * @since 06.11.19
 */
// @dynamic
export class MatSelectCountryModule {
    constructor(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    static forRoot(i18n) {
        return {
            ngModule: MatSelectCountryModule,
            providers: [
                {
                    provide: MatSelectCountryLangToken,
                    useValue: i18n
                }
            ]
        };
    }
    registerCountries() {
        for (const country of COUNTRIES_DB) {
            const countryAlpha2Code = country.alpha2Code.toLowerCase();
            try {
                this.iconRegistry
                    .addSvgIcon(countryAlpha2Code, this.sanitizer
                    .bypassSecurityTrustResourceUrl(`assets/svg-country-flags/svg/${countryAlpha2Code}.svg`));
            }
            catch (err) {
                console.error('Error: icon not found for ' + countryAlpha2Code, err);
            }
        }
    }
}
MatSelectCountryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MatSelectCountryComponent,
                    JoinStringsPipe
                ],
                imports: [
                    CommonModule,
                    // Forms
                    FormsModule,
                    ReactiveFormsModule,
                    // Material
                    MatButtonModule,
                    MatMenuModule,
                    MatInputModule,
                    MatAutocompleteModule,
                    MatIconModule,
                    MatProgressBarModule,
                ],
                exports: [MatSelectCountryComponent],
            },] }
];
MatSelectCountryModule.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9zZWxlY3QtY291bnRyeS9zcmMvbGliL21hdC1zZWxlY3QtY291bnRyeS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXRDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTlDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSTNFOzs7R0FHRztBQUNILFdBQVc7QUF1QlgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUFvQixZQUE2QixFQUFVLFNBQXVCO1FBQTlELGlCQUFZLEdBQVosWUFBWSxDQUFpQjtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDaEYsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBd0M7UUFDckQsT0FBTztZQUNMLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsU0FBUyxFQUNQO2dCQUNFO29CQUNFLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2FBQ0Y7U0FDSixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQjtRQUNmLEtBQUssTUFBTSxPQUFPLElBQUksWUFBWSxFQUFFO1lBQ2xDLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMzRCxJQUFJO2dCQUNGLElBQUksQ0FBQyxZQUFZO3FCQUNkLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUztxQkFDMUMsOEJBQThCLENBQUMsZ0NBQWdDLGlCQUFpQixNQUFNLENBQUMsQ0FBQyxDQUFDO2FBQy9GO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsR0FBRyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RTtTQUNGO0lBQ0gsQ0FBQzs7O1lBbkRGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUU7b0JBQ1oseUJBQXlCO29CQUN6QixlQUFlO2lCQUNoQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFFWixRQUFRO29CQUNSLFdBQVc7b0JBQ1gsbUJBQW1CO29CQUVuQixXQUFXO29CQUNYLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixjQUFjO29CQUNkLHFCQUFxQjtvQkFDckIsYUFBYTtvQkFDYixvQkFBb0I7aUJBQ3JCO2dCQUNELE9BQU8sRUFBRSxDQUFDLHlCQUF5QixDQUFDO2FBQ3JDOzs7WUF6Q3VCLGVBQWU7WUFOOUIsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTWF0QXV0b2NvbXBsZXRlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlJztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQgeyBNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IE1hdElucHV0TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xuaW1wb3J0IHsgTWF0TWVudU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xuaW1wb3J0IHsgTWF0UHJvZ3Jlc3NCYXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wcm9ncmVzcy1iYXInO1xuXG5pbXBvcnQgeyBDT1VOVFJJRVNfREIgfSBmcm9tICcuL2kxOG4nO1xuXG5pbXBvcnQgeyBNYXRTZWxlY3RDb3VudHJ5TGFuZ1Rva2VuIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5pbXBvcnQgeyBKb2luU3RyaW5nc1BpcGUgfSBmcm9tICcuL2pvaW4ucGlwZSc7XG5cbmltcG9ydCB7IE1hdFNlbGVjdENvdW50cnlDb21wb25lbnQgfSBmcm9tICcuL21hdC1zZWxlY3QtY291bnRyeS5jb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBNYXRTZWxlY3RDb3VudHJ5U3VwcG9ydGVkTGFuZ3VhZ2VzID0gJ2JyJyB8ICdkZScgfCAnZW4nIHwgJ2VzJyB8ICdmcicgfCAnaHInIHwgJ2l0JyB8ICdubCcgfCAncHQnO1xuXG4vKipcbiAqIEBhdXRob3IgQW50aG9ueSBOYWhhc1xuICogQHNpbmNlIDA2LjExLjE5XG4gKi9cbi8vIEBkeW5hbWljXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBNYXRTZWxlY3RDb3VudHJ5Q29tcG9uZW50LFxuICAgIEpvaW5TdHJpbmdzUGlwZVxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuXG4gICAgLy8gRm9ybXNcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuXG4gICAgLy8gTWF0ZXJpYWxcbiAgICBNYXRCdXR0b25Nb2R1bGUsXG4gICAgTWF0TWVudU1vZHVsZSxcbiAgICBNYXRJbnB1dE1vZHVsZSxcbiAgICBNYXRBdXRvY29tcGxldGVNb2R1bGUsXG4gICAgTWF0SWNvbk1vZHVsZSxcbiAgICBNYXRQcm9ncmVzc0Jhck1vZHVsZSxcbiAgXSxcbiAgZXhwb3J0czogW01hdFNlbGVjdENvdW50cnlDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWxlY3RDb3VudHJ5TW9kdWxlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSwgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgIHRoaXMucmVnaXN0ZXJDb3VudHJpZXMoKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KGkxOG46IE1hdFNlbGVjdENvdW50cnlTdXBwb3J0ZWRMYW5ndWFnZXMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE1hdFNlbGVjdENvdW50cnlNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1hdFNlbGVjdENvdW50cnlNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6XG4gICAgICAgIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBNYXRTZWxlY3RDb3VudHJ5TGFuZ1Rva2VuLFxuICAgICAgICAgICAgdXNlVmFsdWU6IGkxOG5cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgcmVnaXN0ZXJDb3VudHJpZXMoKSB7XG4gICAgZm9yIChjb25zdCBjb3VudHJ5IG9mIENPVU5UUklFU19EQikge1xuICAgICAgY29uc3QgY291bnRyeUFscGhhMkNvZGUgPSBjb3VudHJ5LmFscGhhMkNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuaWNvblJlZ2lzdHJ5XG4gICAgICAgICAgLmFkZFN2Z0ljb24oY291bnRyeUFscGhhMkNvZGUsIHRoaXMuc2FuaXRpemVyXG4gICAgICAgICAgICAuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKGBhc3NldHMvc3ZnLWNvdW50cnktZmxhZ3Mvc3ZnLyR7Y291bnRyeUFscGhhMkNvZGV9LnN2Z2ApKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogaWNvbiBub3QgZm91bmQgZm9yICcgKyBjb3VudHJ5QWxwaGEyQ29kZSwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==
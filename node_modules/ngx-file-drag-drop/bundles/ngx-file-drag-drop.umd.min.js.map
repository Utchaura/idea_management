{"version":3,"sources":["../../../projects/ngx-file-drag-drop/src/lib/byte.pipe.ts","../../../projects/ngx-file-drag-drop/src/lib/ngx-file-drag-drop/ngx-file-drag-drop.component.ts","../../../projects/ngx-file-drag-drop/src/lib/ngx-file-drag-drop.module.ts","../../../projects/ngx-file-drag-drop/src/lib/validators.ts"],"names":["BytePipe","this","unit","prototype","transform","value","decimals","toString","parseInt","formatBytes","bytes","dm","i","Math","floor","log","parseFloat","pow","toFixed","Pipe","args","name","NgxFileDragDropComponent","valueChanged","EventEmitter","accept","_disabled","_multiple","emptyPlaceholder","multiple","_displayFileSize","_activeBorderColor","_files","_isDragOver","_onChange","val","_onTouched","Object","defineProperty","coerceBooleanProperty","isDragover","color","_a","files","length","disabled","writeValue","fileArray","convertToArray","Error","emitChanges","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","emit","addFiles","merged","concat","removeFile","file","fileIndex","indexOf","currentFiles","slice","splice","clear","change","event","stopPropagation","fileList","target","activate","e","preventDefault","deactivate","handleDrop","_this","dataTransfer","removeDirectories","then","open","fileInputEl","nativeElement","click","Promise","resolve","reject","dirnames","readerList","reader","FileReader","onerror","push","onloadend","filter","includes","readAsArrayBuffer","File","Array","isArray","call","getFileName","size","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","HostBinding","type","Input","Output","ViewChild","HostListener","NgModule","declarations","imports","CommonModule","MatChipsModule","MatIconModule","MatTooltipModule","exports","FileValidators","fileExtension","ext","control","validExtensions","map","trim","toLowerCase","invalidFiles","fname","extension","lastIndexOf","requiredExtension","actualExtensions","uniqueFileNames","duplicates","reduce","acc","curr","duplicatesArray","entries","arr","count","duplicatedFileNames","fileType","types","regExp","joinedTypes","join","RegExp","test","requiredType","actualTypes","maxFileCount","fileCount","maxCount","actualCount","maxFileSize","maxSize","actualSizes","maxTotalSize","actualSize","required"],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'byte'\r\n})\r\nexport class BytePipe implements PipeTransform {\r\n  private unit = 'Bytes';\r\n\r\n  transform(value: string | number, decimals?: number | string): string {\r\n    value = value.toString();\r\n    if (parseInt(value, 10) >= 0) {\r\n      value = this.formatBytes(+value, +decimals);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\r\n  formatBytes(bytes: number, decimals = 2): string {\r\n    if (bytes === 0) { return '0 Bytes'; }\r\n\r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n  }\r\n}\r\n","import { Component, forwardRef, HostBinding, HostListener, ViewChild, Input, ElementRef, Output, EventEmitter } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { BytePipe } from '../byte.pipe';\r\n\r\n@Component({\r\n  selector: 'ngx-file-drag-drop',\r\n  templateUrl: './ngx-file-drag-drop.component.html',\r\n  styleUrls: ['./ngx-file-drag-drop.component.css'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxFileDragDropComponent),\r\n    multi: true\r\n  }]\r\n})\r\nexport class NgxFileDragDropComponent implements ControlValueAccessor {\r\n\r\n  constructor() { }\r\n  @HostBinding('class.disabled')\r\n  @Input()\r\n  get\r\n    disabled() {\r\n    return this._disabled;\r\n  }\r\n  set\r\n    disabled(val: boolean) {\r\n    this._disabled = coerceBooleanProperty(val);\r\n  }\r\n  @Input()\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n  get multiple() {\r\n    return this._multiple;\r\n  }\r\n\r\n  @Input()\r\n  set\r\n    displayFileSize(value: boolean) {\r\n    this._displayFileSize = coerceBooleanProperty(value);\r\n  }\r\n  get\r\n    displayFileSize() {\r\n    return this._displayFileSize;\r\n  }\r\n\r\n  @Input('activeBorderColor')\r\n  @HostBinding('style.border-color')\r\n  set borderColor(color: string) {\r\n    this._activeBorderColor = color;\r\n  }\r\n  get borderColor() {\r\n    return this.isDragover ? this._activeBorderColor : '#ccc';\r\n  }\r\n  get\r\n    files() {\r\n    return this._files;\r\n  }\r\n\r\n  @HostBinding('class.empty-input')\r\n  get isEmpty() {\r\n    return !this.files?.length;\r\n  }\r\n\r\n\r\n  // @HostBinding('class.drag-over')\r\n  get isDragover() {\r\n    return this._isDragOver;\r\n  }\r\n  set isDragover(value: boolean) {\r\n    if (!this.disabled) {\r\n      this._isDragOver = value;\r\n    }\r\n  }\r\n\r\n  @Output()\r\n  private valueChanged = new EventEmitter<File[]>();\r\n\r\n\r\n  @ViewChild('fileInputEl')\r\n  private fileInputEl: ElementRef;\r\n\r\n\r\n  // does no validation, just sets the hidden file input\r\n  @Input() accept = '*';\r\n\r\n  private _disabled = false;\r\n\r\n  _multiple = false;\r\n\r\n  @Input() emptyPlaceholder = `Drop file${this.multiple ? 's' : ''} or click to select`;\r\n\r\n  private _displayFileSize = false;\r\n\r\n\r\n  private _activeBorderColor = 'purple';\r\n\r\n\r\n\r\n  private _files: File[] = [];\r\n  private _isDragOver = false;\r\n\r\n  // https://angular.io/api/forms/ControlValueAccessor\r\n  private _onChange = (val: File[]) => { };\r\n  private _onTouched = () => { };\r\n\r\n  writeValue(files: File[]): void {\r\n    const fileArray = this.convertToArray(files);\r\n    if (fileArray.length < 2 || this.multiple) {\r\n      this._files = fileArray;\r\n      this.emitChanges(this._files);\r\n    }\r\n    else { throw Error('Multiple files not allowed'); }\r\n\r\n  }\r\n  registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  private emitChanges(files: File[]) {\r\n    this.valueChanged.emit(files);\r\n    this._onChange(files);\r\n  }\r\n\r\n  addFiles(files: File[] | FileList | File) {\r\n\r\n    // this._onTouched();\r\n\r\n    const fileArray = this.convertToArray(files);\r\n\r\n    if (this.multiple) {\r\n      // this.errorOnEqualFilenames(fileArray);\r\n      const merged = this.files.concat(fileArray);\r\n      this.writeValue(merged);\r\n    }\r\n    else {\r\n      this.writeValue(fileArray);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  removeFile(file: File) {\r\n    const fileIndex = this.files.indexOf(file);\r\n    if (fileIndex >= 0) {\r\n      const currentFiles = this.files.slice();\r\n      currentFiles.splice(fileIndex, 1);\r\n      this.writeValue(currentFiles);\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.writeValue([]);\r\n  }\r\n\r\n  @HostListener('change', ['$event'])\r\n  change(event: Event) {\r\n    event.stopPropagation();\r\n    this._onTouched();\r\n    const fileList: FileList = (event.target as HTMLInputElement).files;\r\n    if (fileList?.length) {\r\n      this.addFiles(fileList);\r\n    }\r\n    // clear it so change is triggered if same file is selected again\r\n    (event.target as HTMLInputElement).value = '';\r\n  }\r\n\r\n  @HostListener('dragenter', ['$event'])\r\n  @HostListener('dragover', ['$event'])\r\n  activate(e) {\r\n    e.preventDefault();\r\n    this.isDragover = true;\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  deactivate(e) {\r\n    e.preventDefault();\r\n    this.isDragover = false;\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  handleDrop(e) {\r\n    this.deactivate(e);\r\n    if (!this.disabled) {\r\n\r\n      const fileList = e.dataTransfer.files;\r\n      this.removeDirectories(fileList).then((files: File[]) => {\r\n        if (files?.length) {\r\n          this.addFiles(files);\r\n        }\r\n        this._onTouched();\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  open() {\r\n    if (!this.disabled) {\r\n      this.fileInputEl?.nativeElement.click();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // @HostListener('focusout')\r\n  // blur() {\r\n  //   console.log('blurred')\r\n  //   this._onTouched();\r\n  // }\r\n\r\n  // private errorOnEqualFilenames(files: File[]) {\r\n  //   if (this.files.some(file => files.some(file2 => file.name === file2.name))) {\r\n  //     throw Error('one of the provided filenames already exists')\r\n  //   }\r\n\r\n  //   for (let i = 0; i < files.length; i++) {\r\n  //     for (let j = i + 1; j < files.length; j++) {\r\n  //       if (files[i].name === files[j].name) {\r\n  //         throw Error(`can't add multiple files with same name`)\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  private removeDirectories(files: FileList) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      const fileArray = this.convertToArray(files);\r\n\r\n      const dirnames = [];\r\n\r\n      const readerList = [];\r\n\r\n      for (let i = 0; i < fileArray.length; i++) {\r\n\r\n        const reader = new FileReader();\r\n\r\n        reader.onerror = () => {\r\n          dirnames.push(fileArray[i].name);\r\n        };\r\n\r\n        reader.onloadend = () => addToReaderList(i);\r\n\r\n        reader.readAsArrayBuffer(fileArray[i]);\r\n      }\r\n\r\n      function addToReaderList(val: number) {\r\n        readerList.push(val);\r\n        if (readerList.length === fileArray.length) {\r\n          resolve(fileArray.filter((file: File) => !dirnames.includes(file.name)));\r\n        }\r\n\r\n      }\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n  private convertToArray(files: FileList | File[] | File | null | undefined): File[] {\r\n    if (files) {\r\n      if (files instanceof File) {\r\n        return [files];\r\n      } else if (Array.isArray(files)) {\r\n        return files;\r\n      } else {\r\n        return Array.prototype.slice.call(files);\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getFileName(file: File): string {\r\n    if (!this._displayFileSize) { return file.name; }\r\n\r\n    const size = new BytePipe().transform(file.size);\r\n    return `${file.name} (${size})`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { NgxFileDragDropComponent } from './ngx-file-drag-drop/ngx-file-drag-drop.component';\r\nimport { BytePipe } from './byte.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [NgxFileDragDropComponent, BytePipe],\r\n  imports: [\r\n    CommonModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatTooltipModule\r\n  ],\r\n  exports: [NgxFileDragDropComponent, BytePipe]\r\n})\r\nexport class NgxFileDragDropModule { }\r\n","import { ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\n// @dynamic\r\nexport class FileValidators {\r\n    static fileExtension(ext: string[]): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n\r\n            const validExtensions = ext.map(e => e.trim().toLowerCase());\r\n            const fileArray = (control.value as File[]);\r\n\r\n            const invalidFiles = fileArray.map(file => file.name).filter(\r\n                fname => {\r\n                    const extension = fname.slice((fname.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase();\r\n                    return !validExtensions.includes(extension);\r\n                }).map(name => ({ name, ext: name.slice((name.lastIndexOf('.') - 1 >>> 0) + 2) }));\r\n\r\n\r\n\r\n            return !invalidFiles.length\r\n                ? null\r\n                : {\r\n                    fileExtension: {\r\n                        requiredExtension: ext.toString(),\r\n                        actualExtensions: invalidFiles\r\n                    }\r\n                };\r\n        };\r\n    }\r\n\r\n    static uniqueFileNames(control: AbstractControl): ValidationErrors | null {\r\n\r\n        const fileNameArray = (control.value as File[]).map(file => file.name);\r\n\r\n        const duplicates = fileNameArray.reduce((acc, curr) => {\r\n            acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\r\n            return acc;\r\n        }, {});\r\n\r\n\r\n\r\n        const duplicatesArray: { name: string, count: number }[] = (Object.entries(duplicates) as [string, number][])\r\n            .filter(arr => arr[1] > 1)\r\n            .map(arr => ({ name: arr[0], count: arr[1] }));\r\n\r\n        return !duplicatesArray.length\r\n            ? null\r\n            : {\r\n                uniqueFileNames: { duplicatedFileNames: duplicatesArray }\r\n            };\r\n    }\r\n\r\n    static fileType(types: string[] | RegExp): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n\r\n            let regExp: RegExp;\r\n            if (Array.isArray(types)) {\r\n                const joinedTypes = types.join('$|^');\r\n                regExp = new RegExp(`$${joinedTypes}^`, 'i');\r\n            } else {\r\n                regExp = types;\r\n            }\r\n\r\n            const fileArray = (control.value as File[]);\r\n\r\n\r\n\r\n            const invalidFiles = fileArray.filter(\r\n                file => !regExp.test(file.type)).map(file => ({ name: file.name, type: file.type }));\r\n\r\n            return !invalidFiles.length\r\n                ? null\r\n                : {\r\n                    fileType: {\r\n                        requiredType: types.toString(),\r\n                        actualTypes: invalidFiles\r\n                    }\r\n                };\r\n        };\r\n    }\r\n\r\n\r\n\r\n    static maxFileCount(count: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const fileCount = control?.value ? (control.value as File[]).length : 0;\r\n            const result = count >= fileCount;\r\n            return result\r\n                ? null\r\n                : {\r\n                    maxFileCount: {\r\n                        maxCount: count,\r\n                        actualCount: fileCount\r\n                    }\r\n                };\r\n        };\r\n    }\r\n\r\n    static maxFileSize(bytes: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n\r\n\r\n            const fileArray = (control.value as File[]);\r\n\r\n            const invalidFiles = fileArray.filter(file => file.size > bytes).map(file => ({ name: file.name, size: file.size }));\r\n\r\n            return !invalidFiles.length\r\n                ? null\r\n                : {\r\n                    maxFileSize: {\r\n                        maxSize: bytes,\r\n                        actualSizes: invalidFiles\r\n                    }\r\n                };\r\n        };\r\n    }\r\n\r\n    static maxTotalSize(bytes: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const size = control?.value ? (control.value as File[]).map(file => file.size).reduce((acc, i) => acc + i, 0) : 0;\r\n            const result = bytes >= size;\r\n            return result\r\n                ? null\r\n                : {\r\n                    maxTotalSize: {\r\n                        maxSize: bytes,\r\n                        actualSize: size\r\n                    }\r\n                };\r\n        };\r\n    }\r\n    static required(control: AbstractControl): ValidationErrors | null {\r\n        const count = control?.value?.length;\r\n        return count\r\n            ? null\r\n            : {\r\n                required: true\r\n            };\r\n    }\r\n}\r\n"]}
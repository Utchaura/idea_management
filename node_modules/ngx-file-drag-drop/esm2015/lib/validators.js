// @dynamic
export class FileValidators {
    static fileExtension(ext) {
        return (control) => {
            const validExtensions = ext.map(e => e.trim().toLowerCase());
            const fileArray = control.value;
            const invalidFiles = fileArray.map(file => file.name).filter(fname => {
                const extension = fname.slice((fname.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase();
                return !validExtensions.includes(extension);
            }).map(name => ({ name, ext: name.slice((name.lastIndexOf('.') - 1 >>> 0) + 2) }));
            return !invalidFiles.length
                ? null
                : {
                    fileExtension: {
                        requiredExtension: ext.toString(),
                        actualExtensions: invalidFiles
                    }
                };
        };
    }
    static uniqueFileNames(control) {
        const fileNameArray = control.value.map(file => file.name);
        const duplicates = fileNameArray.reduce((acc, curr) => {
            acc[curr] = acc[curr] ? acc[curr] + 1 : 1;
            return acc;
        }, {});
        const duplicatesArray = Object.entries(duplicates)
            .filter(arr => arr[1] > 1)
            .map(arr => ({ name: arr[0], count: arr[1] }));
        return !duplicatesArray.length
            ? null
            : {
                uniqueFileNames: { duplicatedFileNames: duplicatesArray }
            };
    }
    static fileType(types) {
        return (control) => {
            let regExp;
            if (Array.isArray(types)) {
                const joinedTypes = types.join('$|^');
                regExp = new RegExp(`$${joinedTypes}^`, 'i');
            }
            else {
                regExp = types;
            }
            const fileArray = control.value;
            const invalidFiles = fileArray.filter(file => !regExp.test(file.type)).map(file => ({ name: file.name, type: file.type }));
            return !invalidFiles.length
                ? null
                : {
                    fileType: {
                        requiredType: types.toString(),
                        actualTypes: invalidFiles
                    }
                };
        };
    }
    static maxFileCount(count) {
        return (control) => {
            const fileCount = (control === null || control === void 0 ? void 0 : control.value) ? control.value.length : 0;
            const result = count >= fileCount;
            return result
                ? null
                : {
                    maxFileCount: {
                        maxCount: count,
                        actualCount: fileCount
                    }
                };
        };
    }
    static maxFileSize(bytes) {
        return (control) => {
            const fileArray = control.value;
            const invalidFiles = fileArray.filter(file => file.size > bytes).map(file => ({ name: file.name, size: file.size }));
            return !invalidFiles.length
                ? null
                : {
                    maxFileSize: {
                        maxSize: bytes,
                        actualSizes: invalidFiles
                    }
                };
        };
    }
    static maxTotalSize(bytes) {
        return (control) => {
            const size = (control === null || control === void 0 ? void 0 : control.value) ? control.value.map(file => file.size).reduce((acc, i) => acc + i, 0) : 0;
            const result = bytes >= size;
            return result
                ? null
                : {
                    maxTotalSize: {
                        maxSize: bytes,
                        actualSize: size
                    }
                };
        };
    }
    static required(control) {
        var _a;
        const count = (_a = control === null || control === void 0 ? void 0 : control.value) === null || _a === void 0 ? void 0 : _a.length;
        return count
            ? null
            : {
                required: true
            };
    }
}
//# sourceMappingURL=data:application/json;base64,
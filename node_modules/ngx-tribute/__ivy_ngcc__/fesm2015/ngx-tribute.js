import { Directive, ElementRef, EventEmitter, Input, Optional, Output, NgModule } from '@angular/core';
import { FormControlDirective, FormControlName, NgModel } from '@angular/forms';
import Tribute from 'tributejs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
class NgxTributeDirective {
    /**
     * @param {?} element
     * @param {?} formControlName
     * @param {?} formControlDirective
     * @param {?} ngModelDirective
     */
    constructor(element, formControlName, formControlDirective, ngModelDirective) {
        this.element = element;
        this.formControlName = formControlName;
        this.formControlDirective = formControlDirective;
        this.ngModelDirective = ngModelDirective;
        this.onMentioned = new EventEmitter();
        this.mentionItemSelected = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get control() {
        return this.implicitFormControl ||
            (this.formControlName && this.formControlName.control) ||
            (this.formControlDirective && this.formControlDirective.control) ||
            (this.ngModelDirective && this.ngModelDirective.control);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const options = Object.assign({}, this.options);
        if (this.menuContainer) {
            (/** @type {?} */ (options)).menuContainer = this.menuContainer;
        }
        this.tribute = new Tribute(options);
        this.tribute.attach(this.element.nativeElement);
        this.element.nativeElement.addEventListener('tribute-replaced', (event) => {
            /** @type {?} */
            const value = ['INPUT', 'TEXTAREA'].includes(this.element.nativeElement.tagName)
                ? this.element.nativeElement.value
                : this.element.nativeElement.innerHTML;
            this.onMentioned.emit(value);
            this.mentionItemSelected.emit(event.detail.item.original);
            if (this.control) {
                this.control.setValue(value);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.tribute) {
            this.tribute.detach(this.element.nativeElement);
        }
    }
}
NgxTributeDirective.ɵfac = function NgxTributeDirective_Factory(t) { return new (t || NgxTributeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormControlName, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormControlDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgModel, 8)); };
NgxTributeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxTributeDirective, selectors: [["", "ngxTribute", ""]], inputs: { options: ["ngxTribute", "options"], menuContainer: "menuContainer", implicitFormControl: "implicitFormControl" }, outputs: { onMentioned: "onMentioned", mentionItemSelected: "mentionItemSelected" }, exportAs: ["ngx-tribute"] });
/** @nocollapse */
NgxTributeDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FormControlName, decorators: [{ type: Optional }] },
    { type: FormControlDirective, decorators: [{ type: Optional }] },
    { type: NgModel, decorators: [{ type: Optional }] }
];
NgxTributeDirective.propDecorators = {
    options: [{ type: Input, args: ['ngxTribute',] }],
    menuContainer: [{ type: Input }],
    implicitFormControl: [{ type: Input }],
    onMentioned: [{ type: Output }],
    mentionItemSelected: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTributeDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxTribute]',
                exportAs: 'ngx-tribute'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FormControlName, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.FormControlDirective, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgModel, decorators: [{
                type: Optional
            }] }]; }, { onMentioned: [{
            type: Output
        }], mentionItemSelected: [{
            type: Output
        }], options: [{
            type: Input,
            args: ['ngxTribute']
        }], menuContainer: [{
            type: Input
        }], implicitFormControl: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxTributeModule {
}
NgxTributeModule.ɵfac = function NgxTributeModule_Factory(t) { return new (t || NgxTributeModule)(); };
NgxTributeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxTributeModule });
NgxTributeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxTributeModule, { declarations: [NgxTributeDirective], exports: [NgxTributeDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTributeModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgxTributeDirective],
                exports: [NgxTributeDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxTributeModule, NgxTributeDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, Optional, Output } from '@angular/core';
import { FormControl, FormControlDirective, FormControlName, NgModel } from '@angular/forms';
import Tribute from 'tributejs';
/**
 * @template T
 */
var NgxTributeDirective = /** @class */ (function () {
    function NgxTributeDirective(element, formControlName, formControlDirective, ngModelDirective) {
        this.element = element;
        this.formControlName = formControlName;
        this.formControlDirective = formControlDirective;
        this.ngModelDirective = ngModelDirective;
        this.onMentioned = new EventEmitter();
        this.mentionItemSelected = new EventEmitter();
    }
    Object.defineProperty(NgxTributeDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            return this.implicitFormControl ||
                (this.formControlName && this.formControlName.control) ||
                (this.formControlDirective && this.formControlDirective.control) ||
                (this.ngModelDirective && this.ngModelDirective.control);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxTributeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = tslib_1.__assign({}, this.options);
        if (this.menuContainer) {
            (/** @type {?} */ (options)).menuContainer = this.menuContainer;
        }
        this.tribute = new Tribute(options);
        this.tribute.attach(this.element.nativeElement);
        this.element.nativeElement.addEventListener('tribute-replaced', function (event) {
            /** @type {?} */
            var value = ['INPUT', 'TEXTAREA'].includes(_this.element.nativeElement.tagName)
                ? _this.element.nativeElement.value
                : _this.element.nativeElement.innerHTML;
            _this.onMentioned.emit(value);
            _this.mentionItemSelected.emit(event.detail.item.original);
            if (_this.control) {
                _this.control.setValue(value);
            }
        });
    };
    /**
     * @return {?}
     */
    NgxTributeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.tribute) {
            this.tribute.detach(this.element.nativeElement);
        }
    };
    NgxTributeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxTribute]',
                    exportAs: 'ngx-tribute'
                },] },
    ];
    /** @nocollapse */
    NgxTributeDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FormControlName, decorators: [{ type: Optional }] },
        { type: FormControlDirective, decorators: [{ type: Optional }] },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    NgxTributeDirective.propDecorators = {
        options: [{ type: Input, args: ['ngxTribute',] }],
        menuContainer: [{ type: Input }],
        implicitFormControl: [{ type: Input }],
        onMentioned: [{ type: Output }],
        mentionItemSelected: [{ type: Output }]
    };
    return NgxTributeDirective;
}());
export { NgxTributeDirective };
if (false) {
    /** @type {?} */
    NgxTributeDirective.prototype.options;
    /** @type {?} */
    NgxTributeDirective.prototype.menuContainer;
    /** @type {?} */
    NgxTributeDirective.prototype.implicitFormControl;
    /** @type {?} */
    NgxTributeDirective.prototype.onMentioned;
    /** @type {?} */
    NgxTributeDirective.prototype.mentionItemSelected;
    /** @type {?} */
    NgxTributeDirective.prototype.tribute;
    /** @type {?} */
    NgxTributeDirective.prototype.element;
    /** @type {?} */
    NgxTributeDirective.prototype.formControlName;
    /** @type {?} */
    NgxTributeDirective.prototype.formControlDirective;
    /** @type {?} */
    NgxTributeDirective.prototype.ngModelDirective;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyaWJ1dGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRyaWJ1dGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXRyaWJ1dGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxRQUFRLEVBQUUsTUFBTSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBQyxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNGLE9BQU8sT0FBNEMsTUFBTSxXQUFXLENBQUM7Ozs7O0lBd0JqRSw2QkFDWSxTQUNZLGVBQWdDLEVBQ2hDLG9CQUEwQyxFQUMxQyxnQkFBeUI7UUFIckMsWUFBTyxHQUFQLE9BQU87UUFDSyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVM7MkJBWG5DLElBQUksWUFBWSxFQUFVO21DQUdsQixJQUFJLFlBQVksRUFBTztLQVN6QztJQUVKLHNCQUFJLHdDQUFPOzs7O1FBQVg7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQjtnQkFDM0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO2dCQUN0RCxDQUFDLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDO2dCQUNoRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEU7OztPQUFBOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQUEsaUJBd0JDOztRQXZCRyxJQUFNLE9BQU8sd0JBQTJCLElBQUksQ0FBQyxPQUFPLEVBQUc7UUFFdkQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDckIsbUJBQUMsT0FBK0IsRUFBQyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFVBQUMsS0FBSzs7WUFDbEUsSUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUN4QyxLQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQ3JDO2dCQUNHLENBQUMsQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLO2dCQUNsQyxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1lBRTNDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFMUQsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsS0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEM7U0FDSixDQUFDLENBQUM7S0FDTjs7OztJQUVELHlDQUFXOzs7SUFBWDtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDtLQUNKOztnQkFsRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QixRQUFRLEVBQUUsYUFBYTtpQkFDMUI7Ozs7Z0JBUGtCLFVBQVU7Z0JBQ2MsZUFBZSx1QkEyQmpELFFBQVE7Z0JBM0JJLG9CQUFvQix1QkE0QmhDLFFBQVE7Z0JBNUIyQyxPQUFPLHVCQTZCMUQsUUFBUTs7OzBCQXJCWixLQUFLLFNBQUMsWUFBWTtnQ0FHbEIsS0FBSztzQ0FHTCxLQUFLOzhCQUdMLE1BQU07c0NBR04sTUFBTTs7OEJBckJYOztTQVFhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE9wdGlvbmFsLCBPdXRwdXQsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sLCBGb3JtQ29udHJvbERpcmVjdGl2ZSwgRm9ybUNvbnRyb2xOYW1lLCBOZ01vZGVsfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgVHJpYnV0ZSwge1RyaWJ1dGVDb2xsZWN0aW9uLCBUcmlidXRlT3B0aW9uc30gZnJvbSAndHJpYnV0ZWpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbmd4VHJpYnV0ZV0nLFxuICAgIGV4cG9ydEFzOiAnbmd4LXRyaWJ1dGUnXG59KVxuZXhwb3J0IGNsYXNzIE5neFRyaWJ1dGVEaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCduZ3hUcmlidXRlJylcbiAgICBvcHRpb25zOiBUcmlidXRlT3B0aW9uczxUPjtcblxuICAgIEBJbnB1dCgpXG4gICAgbWVudUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIGltcGxpY2l0Rm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25NZW50aW9uZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG1lbnRpb25JdGVtU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIHRyaWJ1dGU6IFRyaWJ1dGU8VD47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGZvcm1Db250cm9sTmFtZTogRm9ybUNvbnRyb2xOYW1lLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGZvcm1Db250cm9sRGlyZWN0aXZlOiBGb3JtQ29udHJvbERpcmVjdGl2ZSxcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ01vZGVsRGlyZWN0aXZlOiBOZ01vZGVsXG4gICAgKSB7fVxuXG4gICAgZ2V0IGNvbnRyb2woKTogRm9ybUNvbnRyb2wge1xuICAgICAgICByZXR1cm4gdGhpcy5pbXBsaWNpdEZvcm1Db250cm9sIHx8XG4gICAgICAgICAgICAodGhpcy5mb3JtQ29udHJvbE5hbWUgJiYgdGhpcy5mb3JtQ29udHJvbE5hbWUuY29udHJvbCkgfHxcbiAgICAgICAgICAgICh0aGlzLmZvcm1Db250cm9sRGlyZWN0aXZlICYmIHRoaXMuZm9ybUNvbnRyb2xEaXJlY3RpdmUuY29udHJvbCkgfHxcbiAgICAgICAgICAgICh0aGlzLm5nTW9kZWxEaXJlY3RpdmUgJiYgdGhpcy5uZ01vZGVsRGlyZWN0aXZlLmNvbnRyb2wpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBUcmlidXRlT3B0aW9uczxUPiA9IHsgLi4udGhpcy5vcHRpb25zIH07XG5cbiAgICAgICAgaWYgKHRoaXMubWVudUNvbnRhaW5lcikge1xuICAgICAgICAgICAgKG9wdGlvbnMgYXMgVHJpYnV0ZUNvbGxlY3Rpb248VD4pLm1lbnVDb250YWluZXIgPSB0aGlzLm1lbnVDb250YWluZXI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWJ1dGUgPSBuZXcgVHJpYnV0ZShvcHRpb25zKTtcbiAgICAgICAgdGhpcy50cmlidXRlLmF0dGFjaCh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJpYnV0ZS1yZXBsYWNlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBbJ0lOUFVUJywgJ1RFWFRBUkVBJ10uaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGFnTmFtZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgICAgICA6IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcblxuICAgICAgICAgICAgdGhpcy5vbk1lbnRpb25lZC5lbWl0KHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMubWVudGlvbkl0ZW1TZWxlY3RlZC5lbWl0KGV2ZW50LmRldGFpbC5pdGVtLm9yaWdpbmFsKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy50cmlidXRlKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWJ1dGUuZGV0YWNoKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==